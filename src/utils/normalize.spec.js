import { normalize } from './normalize'

describe('normalize ENS name', () => {
  it('should clean ZWJ from name', async () => {
    const name = '‚Äå‚Äå‚Äå‚Äå0.eth' // name with ZWJ prefix;
    const normalizedName = await normalize(name)
    expect(normalizedName).not.toEqual(name)
  })

  it('should keep compound emojis as it is (astronout)', async () => {
    const name = 'üë©‚ÄçüöÄüë©‚ÄçüöÄüë©‚ÄçüöÄ.eth' // name with compound emoji (glued with ZWJ); üë© + ZWJ + üöÄ = üë©‚ÄçüöÄ
    const normalizedName = await normalize(name)
    expect(normalizedName).toEqual(name)
  })

  it('should keep compound emojis as it is (flag)', async () => {
    const name = 'üè≥‚Äçüåàüè≥‚Äçüåàüè≥‚Äçüåà.eth' // name with compound emoji (glued with ZWJ); üè≥Ô∏è + ZWJ + üåà = üè≥‚Äçüåà
    const normalizedName = await normalize(name)
    expect(normalizedName).toEqual(name)
  })

  it('should keep symbols as it is', async () => {
    const name = '‚ô•‚ô•‚ô•.eth' // name with heart symbol
    const normalizedName = await normalize(name)
    expect(normalizedName).toEqual(name)
  })

  it('should not let ZWJ as prefixed to symbols', async () => {
    const name = '‚Äç‚ô•‚ô•‚ô•.eth' // name with heart symbol, ZWJ prefixed
    const normalizedName = await normalize(name)
    expect(normalizedName).not.toEqual(name)
  })

  it('should not let ZWJ as prefixed to latin characters', async () => {
    const name = '‚Äçnick.eth' // name with latin chars, ZWJ prefixed
    const normalizedName = await normalize(name)
    expect(normalizedName).not.toEqual(name)
  })

  it('should not let ZWJ as mixed into latin characters', async () => {
    const name = 'nic‚Äçk.eth' // name with latin chars, ZWJ prefixed
    const normalizedName = await normalize(name)
    expect(normalizedName).not.toEqual(name)
  })
})
